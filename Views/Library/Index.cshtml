@{
    ViewData["Title"] = "Library";
}

<h1 class="text-4xl font-bold text-center text-white">Library</h1>

@if (Directory.Exists(System.IO.Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/uploads")))
{
    var uploadPath = System.IO.Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/uploads");
    
    var files = Directory.GetFiles(uploadPath)
        .Where(f => f.EndsWith(".mp3", StringComparison.OrdinalIgnoreCase) || f.EndsWith(".flac", StringComparison.OrdinalIgnoreCase) || f.EndsWith(".wav", StringComparison.OrdinalIgnoreCase))
        .OrderBy(f => System.IO.Path.GetFileName(f))
        .ToList();
    
    <ul class="w-full md:w-1/2 mx-auto">
        @foreach (var file in files)
        {
            var fileName = System.IO.Path.GetFileName(file);
            var fileUrl = Url.Content($"~/uploads/{fileName}");

            // Get metadata with TagLib#
            var tagFile = TagLib.File.Create(file);
            var artist = tagFile.Tag.Performers.FirstOrDefault() ?? "Unknown Artist";
            var duration = tagFile.Properties.Duration;
            var bitrate = tagFile.Properties.AudioBitrate;

            <li class="bg-gray-800 bg-opacity-30 m-2 p-2 text-white" data-file="@fileUrl">
                <strong class="text-xl">@fileName</strong><br />
                <strong> Artist: </strong> @artist <br />
                <strong> Duration: </strong> @duration <br />
                <strong> Bitrate: </strong> @bitrate kbps <br />
                <div class="flex space-x-2">
                    <a class="bg-gray-600 p-2 hover:bg-gray-400 font-bold flex items-center justify-center h-10" href="@fileUrl" onclick="playAudio('@fileUrl'); return false;">Play</a>
                    <a class="bg-gray-600 p-2 hover:bg-gray-400 flex front-bold items-center justify-center h-10" href="@fileUrl" onclick="removeAudio('@fileUrl'); return false;">Remove</a>
                    <button class="bg-gray-600 p-2 hover:bg-gray-400 flex font-bold items-center justify-center h-10" onclick="showPlaylists('@fileName')">Add to Playlist</button>
                </div>
            </li>
        }
    </ul>
}
else
{
    <p>The upload directory does not exist. (/wwwroot/uploads)</p>
}

<div class="rounded-2xl bg-gray-200 p-2" id="playlistModal" style="display: none; position: fixed; top: 20%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; border: 1px solid #ccc; rgba(0, 0, 0, 0.1); z-index: 1000;">
    <h3 class="underline font-bold my-2">Select a Playlist:</h3>
    <ul id="modalPlaylistList"></ul>
    <button class="bg-gray-600 p-2 hover:bg-gray-400 h-10 m-1 rounded" onclick="closeModal()">[X]</button>
</div>

<div id="overlay" class="hidden fixed inset-0 w-full h-full bg-black bg-opacity-50 z-50" onclick="closeModal()"></div>

<script>
    /*
     * Loads audio player in footer with the selected song
     */
    function playAudio(fileUrl) {
        const audioPlayer = document.querySelector('footer audio');
        const sources = audioPlayer.querySelectorAll('source');

        sources[0].src = fileUrl.endsWith('.flac') ? fileUrl : '';
        sources[1].src = fileUrl.endsWith('.mp3') ? fileUrl : '';

        audioPlayer.load();
        if (fileUrl.endsWith('.flac') || fileUrl.endsWith('.mp3')) {
            audioPlayer.play();
        } else {
            console.warn("Unsupported audio format");
        }
    }
    
    /*
     * Sends a request to the controller to delete a file from the local file system
     */
    function removeAudio(fileUrl) {
        if (!confirm("Are you sure you want to delete this file?")) return;

        const listItem = document.querySelector(`[data-file="${fileUrl}"]`);
        fetch('/Library/DeleteFile', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(fileUrl)
        })
            .then(response => response.json())
            .then(data => {
                alert(data.message || "File deleted successfully");
                
                if (response.ok) {
                    listItem.remove();
                } 
            })
            .catch(error => alert("Error deleting file: " + error));
    }

    /*
     * Shows all playlists from the DB in the Modal
     */
    function showPlaylists(songName) {
        fetch('/Playlist')
            .then(response => response.json())
            .then(data => {
                const modalPlaylistList = document.getElementById('modalPlaylistList');
                modalPlaylistList.innerHTML = '';
                data.forEach(playlist => {
                    const li = document.createElement('li');
                    
                    const button = document.createElement('button');
                    button.textContent = playlist.name;
                    button.className = 'bg-gray-600 text-white px-4 p-2 m-1 rounded hover:bg-gray-400';
                    button.onclick = () => addToPlaylist(playlist.id, songName);
                    
                    li.appendChild(button);
                    modalPlaylistList.appendChild(li);
                });

                document.getElementById('playlistModal').style.display = 'block';
                document.getElementById('overlay').style.display = 'block';
            });
    }

    /*
     * Sends a request to the controller to create a relationship between a song and a playlist
     */
    function addToPlaylist(playlistId, songName) {
        fetch(`/Playlist/${playlistId}/AddSong`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(songName),
        }).then(() => {
            closeModal();
        });
    }
    
    /*
     * Closes "Add to Playlist" Modal
     */
    function closeModal() {
        document.getElementById('playlistModal').style.display = 'none';
        document.getElementById('overlay').style.display = 'none';
    }
</script>
